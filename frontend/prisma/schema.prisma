generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model community {
  id                              Int                               @id @default(autoincrement())
  name                            String                            @unique @db.VarChar(255)
  creator_id                      Int
  description                     String                            @default("")
  image_url                       String?                           @db.VarChar(255)
  category_id                     Int
  category                        community_category                @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_community_category")
  community_contributors          community_contributors[]
  community_contributors_requests community_contributors_requests[]
  community_learners              community_learners[]
  community_posts                 community_posts[]
  community_presentation          community_presentation?
}

model community_contributors {
  community_id   Int
  contributor_id Int
  added_at       DateTime? @default(now()) @db.Timestamp(6)
  community      community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([community_id, contributor_id])
}

model community_learners {
  community_id Int
  learner_id   Int
  joined_at    DateTime? @default(now()) @db.Timestamp(6)
  community    community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([community_id, learner_id])
}

model community_posts {
  id                   Int       @id @default(autoincrement())
  community_id         Int
  author_id            Int
  content              String
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)
  likes_count          Int?      @default(0)
  title                String    @db.VarChar(255)
  tag                  String    @db.VarChar(50)
  cover_image_url      String    @db.VarChar(255)
  accept_contributions Boolean?  @default(false)
  status               String    @db.VarChar(50)
  community            community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id             Int      @id(map: "User_pkey") @default(autoincrement())
  fullName       String   @db.VarChar(255)
  userName       String   @unique(map: "username_unique") @db.VarChar(50)
  profilePicture String
  email          String   @unique(map: "email_unique") @db.VarChar(255)
  password       String
  accountAddress String   @db.VarChar(65)
  publicKey      String   @db.VarChar(65)
  privateKey     String   @db.VarChar(160)
  salt           String   @db.VarChar(32)
  iv             String   @db.VarChar(32)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
}

model community_category {
  id        Int         @id(map: "category_pkey") @default(autoincrement())
  name      String      @db.VarChar(255)
  label     String      @db.VarChar(255)
  community community[]
}

model community_presentation {
  id              Int       @id @default(autoincrement())
  community_id    Int       @unique
  video_url       String?
  topic_details   String
  code_of_conduct String
  disclaimers     String
  community       community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model community_contributors_requests {
  id               Int       @id @default(autoincrement())
  community_id     Int
  requester_id     Int
  justification    String
  expertise_domain String    @db.VarChar(255)
  status           String?   @default("PENDING") @db.VarChar(50)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  rejection_reason String?
  community        community @relation(fields: [community_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([community_id, requester_id], map: "community_contributors_requests_community_id_contributor_id_key")
}
